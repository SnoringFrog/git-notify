#!/bin/bash

function run {
# how we want to extract the variables from the commit message.
format_name="--format=%cn"
format_when="--format=%cr"
format_summary="--format=%s"
format_body="--format=%b"

# what branch do we want to watch (default to master)
if [ -z "$1" ]; then
	branch="master"
else
	branch="$1"
fi
repository=`git config --get remote.origin.url`
repository_name=`basename \`git rev-parse --show-toplevel\``
latest_revision="none"

# loop forever, need to kill the process.
while [ 1 ]; do

    # get the latest revision SHA.
    # current_revision=`git rev-parse $branch`
	current_revision=`git ls-remote --heads $repository $branch | tail -n 1 | cut -f1`

    # if we haven't seen that one yet, then we know there's new stuff.
    if [ $latest_revision != $current_revision ]; then

        # mark the newest revision as seen.
        latest_revision=$current_revision

		# These do not work for remote repos
        # extract the details from the log.
        #commit_name=`git log -1 $format_name $latest_revision`
        #commit_when=`git log -1 $format_when $latest_revision`
        #commit_summary=`git log -1 $format_summary $latest_revision`
        #commit_body=`git log -1 $format_body $latest_revision`

        # notify the user of the commit.
        #summary="Commit to $repository_name $commit_name $commit_when!"
        summary="Commit to $repository_name!"

        #body="$commit_name committed to $repository_name $branch $commit_when\n\n$commit_summary\n\n$commit_body"
        body="Commit on $repository_name $branch"
	if [ "`uname`" == "Darwin" ]
	then
		say -v Daniel "Commit made to $repository_name"
		command="osascript -e 'display notification \"$body\" with title \"$summary\"'"
		eval $command
	else
		`notify-send "$summary" "$body"` 
	fi

    fi
    sleep 60
done
}

if git rev-parse --git-dir > /dev/null 2>&1; then
	(run $1 &)
else
	echo "Error: not a git repository"
fi
